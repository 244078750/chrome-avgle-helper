#!/usr/bin/env bash

LIST_FILE="concat.list"

# ffmpeg binary file
# it will be a path to a binary file in `windows-libs` directory if this script is running in git bash
FFMPEG_BIN="ffmpeg";

SUPPORTED_PAGE_TYPE=(avgle xvideos);

#================================
#====   Colorized variables  ====
if [[ -t 1 ]]; then # is terminal?
	COLOR_MODE=`tput colors`;
	if [[ -n "$COLOR_MODE" ]] && [[ "$COLOR_MODE" -ge 8 ]]; then
		BOLD="\x1b[1m";      DIM="\x1b[2m";           RESET="\x1b[0m";
		RED="\x1b[0;31m";    RED_BOLD="\x1b[1;31m";
		YELLOW="\x1b[0;33m"; YELLOW_BOLD="\x1b[1;33m";
		GREEN="\x1b[0;32m";  GREEN_BOLD="\x1b[1;32m";
		BLUE="\x1b[0;34m";   BLUE_BOLD="\x1b[1;34m";
		GREY="\x1b[37m";     CYAN_BOLD="\x1b[1;36m";
	fi
fi
#================================
#====   Basic functions  ========
function confirm() {
	local yn;
	while read -p "Confirm (y/n) > " yn; do
		if [[ "$yn" == y* ]] || [[ "$yn" == Y* ]]; then return 0; fi
		if [[ "$yn" == n* ]] || [[ "$yn" == N* ]]; then return 1; fi
	done
}
function title() { echo -e "${BLUE_BOLD}# ${1}${RESET}"; }
function finish() { echo -e "\n${GREEN_BOLD}# Finish!${RESET}\n"; exit 0; }
function userAbort() { echo -e "\n${YELLOW_BOLD}# Abort by user!${RESET}\n"; exit 0; }
function warn() { echo -e "${YELLOW_BOLD}  Warning: ${1} ${RESET}"; }
function success() { echo -e "${GREEN}  Success: ${1} ${RESET}"; }
function error() { echo -e "${RED_BOLD}  Error:   ${RED}$1${RESET}\n"; exit 1; }


#=======================================================
# Banner color palette: #EF413F #FFB938 #3484EE #21A658
C0="$RESET"; C1="$RED"; C2="$YELLOW"; C3="$BLUE"; C4="$GREEN"; C5="$GREY"
if [[ -n "$C0" ]]; then
	if [[ "$COLORTERM" = truecolor ]] || [[ "$COLORTERM" = 24bit ]]; then
		C1="\x1b[38;2;239;65;63m";   C2="\x1b[38;2;255;185;56m";
		C3="\x1b[38;2;52;132;238m";  C4="\x1b[38;2;33;166;88m";
	fi
fi
# Print banner
echo -e '     '$C1'_'$C0'        '$C0'        '$C4'_   '$C1'         '$C0
echo -e '    '$C1'/ \\'$C2'    __'$C3'  __ _  '$C4'| | '$C1'  ___    '$C0
echo -e '   '$C1'/ _ \\'$C2'  / /'$C3' / _` | '$C4'| | '$C1' / _ \\  '$C0
echo -e '  '$C1'/ ___ '$C2'\\/ / '$C3'| (_| | '$C4'| | '$C1'|  __/   '$C0
echo -e ' '$C1'/_/   '$C2'\\__/  '$C3' \\__, |'$C4' |_|'$C1'  \\___| '$C0
echo -e '  '$C0'      '$C0'      '$C3'|___/   '$C4'    '$C1'         '$C0
echo -e "${BOLD} Merge ts files you downloaded from avgle into mp4 via ffmpeg${RESET}"
echo -e "${DIM} Updated date: 2019-01-30${RESET}"
echo -e ''

# ===========================
# Windows User
WIN_USER=false
UNAME_S="$(uname -s)";
if [[ "$UNAME_S" == MINGW* ]] || [[ "$UNAME_S" == CYGWIN* ]]; then
	WIN_USER=true;
fi

# ===========================
# Checking dependencies
[[ -z `which gawk` ]] && error "\"gawk\" is missing! (Ubuntu: sudo apt install gawk)";
# [[ -z `which sed` ]] && error "\"sed\" is missing! (Ubuntu: sudo apt install sed)";

WHICH_FFMPEG="$(which "$FFMPEG_BIN" 2>/dev/null)"
if [[ -z "$WHICH_FFMPEG" ]]; then
	if [[ $WIN_USER == true ]]; then
		__DIRNAME="$(cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd)";

		pushd "$__DIRNAME" > /dev/null || error "goto script directory failed!";
		FFMPEG_BIN="$(find windows-libs -type f -name "ffmpeg.exe" | head -n1)";
		if [[ -z "$FFMPEG_BIN" ]]; then
			FIX_IT="(How to fix this error: read windows-libs/README.md)"
			error "ffmpeg.exe is missng in directory \"windows-libs\". $FIX_IT";
		fi
		FFMPEG_BIN="$__DIRNAME/$FFMPEG_BIN";
		popd;
	else
		error "\"$FFMPEG_BIN\" is missing! (Ubuntu: sudo apt install $FFMPEG_BIN)";
	fi
fi

# ===========================
# Pre-check
M3U8_FILE="$1";
if [[ -n "$M3U8_FILE" ]]; then
	if [[ ! -f "$M3U8_FILE" ]]; then
		M3U8_FILE="${M3U8_FILE}.m3u8";
	fi
	if [[ ! -f "$M3U8_FILE" ]]; then
		warn "$M3U8_FILE is not a file!";
		M3U8_FILE="";
	fi
fi
if [[ -z "$M3U8_FILE" ]]; then # if m3u8 file path still empty!
	M3U8_FILE_COUNT="$(find . -maxdepth 1 -type f -iname '*.m3u8' | wc -l)";
	[[ "$M3U8_FILE_COUNT" -lt 1 ]] && error "can not find any m3u8 file in current directory!";
	[[ "$M3U8_FILE_COUNT" -gt 1 ]] && error "too many m3u8 files in currenct directory!";
	M3U8_FILE="$(find . -maxdepth 1 -type f -iname '*.m3u8' | head -n1 | xargs -I _f basename _f)"
fi
if [[ -z "$M3U8_FILE" ]] || [[ ! -f "$M3U8_FILE" ]]; then
	error "name of m3u8 file is empty. or m3u8 file is missin!";
fi

VIDEO_NAME="${M3U8_FILE%.*}"
# TEMP_WORKSPACE=".tmp-avgle~${VIDEO_NAME}";
TARGET_FILE="../${VIDEO_NAME}.mp4"; # relative path for temporary workspace
PAGE_TYPE="";

# Search temporary directory. And guess page type too.
for _type in "${SUPPORTED_PAGE_TYPE[@]}"; do
	TEMP_WORKSPACE=".tmp-${_type}~${VIDEO_NAME}";
	if [[ -d "$TEMP_WORKSPACE" ]]; then
		PAGE_TYPE="$_type";
		break;
	fi
done

[[ -n "$PAGE_TYPE" ]] || error "can't find temporary directory of video ${VIDEO_NAME}";
pushd "$TEMP_WORKSPACE" >/dev/null || error "goto temp workspace ${TEMP_WORKSPACE} failed!";

# ===========================
# Getting max number
MAX_NUMBER=$(ls | tr ' ' '\n' | gawk '
	/^seg-([0-9]+)-v1-a1.ts$/ {
		if(match($1, /seg-([0-9]+)-v1-a1.ts/, result)) {
			v = result[1] - 0;
			if(v > max) max = v;
		}
	}
	/^hls-[0-9]+p([0-9]+).ts$/ {
		if(match($1, /hls-[0-9]+p([0-9]+).ts/, result)) {
			v = result[1] - 0;
			if(v > max) max = v;
		}
	}
	END {print max ? max : "NULL"}')
[[ "$MAX_NUMBER" == "NULL" ]] && error "could not find any corrected ts files you downloaded from avgle";
title "Found avgle ts files, max ts file number is: ${MAX_NUMBER}";

# ===========================
# Valid all ts files is under folder
FILES_OK=true
FFMPEG_LIST_FILE_CONTENT="";

FNAME_PREFIX="seg-"; # avgle
FNAME_SUFFIX="-v1-a1.ts"; # avgle
FIRST_FRAGMENT_ID=1;
if [[ $PAGE_TYPE == xvideos ]]; then
	FNAME_PREFIX="$(ls | awk '/\.ts$/ {print $0;exit;}')"
	FNAME_PREFIX="${FNAME_PREFIX%%p*}p";
	FNAME_SUFFIX=".ts";
	FIRST_FRAGMENT_ID=0;
fi
# echo "$FNAME_PREFIX <..> $FNAME_SUFFIX";
for (( i=$FIRST_FRAGMENT_ID ; i<=$MAX_NUMBER ; i++ )) do
	FNAME="${FNAME_PREFIX}${i}${FNAME_SUFFIX}";
	FFMPEG_LIST_FILE_CONTENT="${FFMPEG_LIST_FILE_CONTENT}file ${FNAME}\n";
	if [[ ! -f "$FNAME" ]]; then
		warn "$FNAME is missing!";
		FILES_OK=false
	fi
done
[[ "$FILES_OK" == "false" ]] && error "*.ts files are not completed!"
title "Confirmed all *.ts files are existed"

# ===========================
# Generate concat list file for ffmpeg
title "Generating list file for ffmpeg ...";
[[ -f "../$M3U8_FILE" ]] || error "m3u8 play list file \"../$M3U8_FILE\" is not existed!";

if [[ -e "$LIST_FILE" ]]; then
	echo -e "\nList file ($LIST_FILE) is existed! Do you want to delete it and continue?";
	confirm || userAbort;
	rm -f $LIST_FILE || error "could not delete ${LIST_FILE}";
fi

echo -e "$FFMPEG_LIST_FILE_CONTENT" > "$LIST_FILE" || error "generate list file failed!";
# sed -e '/^#/d' -e 's:^http.*mp4/:file :g' "../$M3U8_FILE" > "$LIST_FILE" || error "generate list file failed!";

title "Concat file $LIST_FILE generated"

# ===========================
# Converting .ts file
title "Converting ts file to mp4 files ..."
if [[ -e "$TARGET_FILE" ]]; then
	echo -e "\nTarget file is existed! do you want to delete and continue? ($TARGET_FILE)";
	confirm || userAbort;
	rm -f $TARGET_FILE || error "could not delete ${TARGET_FILE}";
fi

# -f concat can be performed in ffmpeg, reduce disk usage and time
# -c copy is equal to -acodec copy -vcodec copy, we just don't want to re-encode the file
# -bsf: Bitstream Filters  -bsf:a audio stream filter
# aac_adtstoasc: https://ffmpeg.org/ffmpeg-bitstream-filters.html#aac_005fadtstoasc
#   Convert MPEG-2/4 AAC ADTS to an MPEG-4 Audio Specific Configuration bitstream.
#   Reference from repo: https://github.com/mywarr/chrome-avgle-helper
"$FFMPEG_BIN" -f concat -i "${LIST_FILE}" -bsf:a aac_adtstoasc -c copy "${TARGET_FILE}" -loglevel error \
	|| error "ffmpeg convert response exception!"
title "Converted ${LIST_FILE} file to ${TARGET_FILE}";

popd >/dev/null || error "got back to parent directory failed!";

# ===========================
# Deleting files
echo -e "\nDo you want to delete temp directory and m3u8 file ?";
confirm || finish

title "Deleting temp directory ${TEMP_WORKSPACE} ..."
rm -r "${TEMP_WORKSPACE}" || error "delete failed!";

title "Deleting m3u8 file ${M3U8_FILE} ..."
rm "${M3U8_FILE}" || error "delete failed!";
title "All temporary files are deleted!"

finish
